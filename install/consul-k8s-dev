#!/bin/bash
VERSION=0.1.2

export KUBECONFIG="$(pwd)/kubeconfig.yml"
CLUSTER_NAME=consul-k8s-dev

function up() {
  docker run --network host -it -v "/var/run/docker.sock:/var/run/docker.sock" -v "$HOME/.consul_k8s:/files" -w "/files" nicholasjackson/consul-k8s-tools:$VERSION bash -c "./consul-k8s-dev create"
}

function down() {
  docker run -it -v "/var/run/docker.sock:/var/run/docker.sock" -v "$HOME/.consul_k8s:/files" -w "/files" nicholasjackson/consul-k8s-tools:$VERSION bash -c "./consul-k8s-dev destroy"
}

function tools() {
  FOLDER="-v $(pwd):/work"

  if [[ ! -z $1 ]]; then
    echo "#### Mapping local folder to tools container"
    echo ""
    FOLDER="-v $1:/work"
  fi;

 echo "To expose service in Kubernetes to localhost use kubernetes"
 echo "port forwarding e.g."
 echo ""
 echo "kubectl port-forward --address 0.0.0.0 svc/myservice 10000:80"
 echo ""

  # NOTE: Host networking does not work correctly on the Mac :(
  # we can access host services on localhost so kubectl works
  # however exposed services in the container do not get 
  # bound to the localhost ip
  if [ $(uname -s) == "Darwin" ]; then
    echo "Mapping ports 10000-10100 on localhost to"
    echo "10000-10100 on container."
    echo ""

    docker run \
      --rm -it \
      -p 10000-10100:10000-10100 \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -v $HOME/.consul_k8s:/files $FOLDER \
      -w /work \
      -e "KUBECONFIG=/files/kubeconfig-docker.yml" \
      -e "CONSUL_HTTP_ADDR=http://kind-worker:30443" \
      --link $CLUSTER_NAME-control-plane \
      --link $CLUSTER_NAME-worker \
      nicholasjackson/consul-k8s-tools:$VERSION bash
      
    exit 0
  fi

  # For other systems default to Host networking
  echo "Using Host networking in docker"
  echo "Ports opened in the container will be accessible on the local machine"
  echo "at the same address and port"
  echo ""
  docker run \
    --rm -it \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v $HOME/.consul_k8s:/files $FOLDER \
    -w /work \
    -e "KUBECONFIG=/files/kubeconfig.yml" \
    nicholasjackson/consul-k8s-tools:$VERSION bash
}

function destroy() {
  kind delete cluster --name $CLUSTER_NAME
}

function install_cluster() {
	echo "#### Create Kubernetes cluster in Docker"
  echo ""

  # Check if cluster exists, if it does exit exit
  if kind get clusters | grep $CLUSTER_NAME; then
    echo "Cluster already exists"
    echo "Use \"consul-k8s-dev down\" to delete cluster before running up again"
    exit 1
  fi

	kind create cluster --config ./config/config.yml --name $CLUSTER_NAME

  # Export KubeConfig
  cat $(kind get kubeconfig-path --name $CLUSTER_NAME) > ./kubeconfig.yml
 
  # Create a docker version of the config which replaces the address with the 
  # name of the container
  sed 's/127.0.0.1:[0-9]*/kind-control-plane:6443/' ./kubeconfig.yml > ./kubeconfig-docker.yml
}

function install_core() {
	# Wait for cluster to be available
	echo "#### Waiting for Kubernetes to start"
  echo ""

	until $(kubectl get pods); do
		sleep 1
	done

	echo "#### Install local storage controller for Kubernetes"
  echo ""
	# Add storage
	kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
	kubectl get storageclass

	echo "#### Configure RBAC for Helm tiller" 
  echo ""
	# Create tiller service account
	kubectl -n kube-system create serviceaccount tiller

	# Create cluster role binding for tiller
	kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller

	echo "#### Install Helm tiller" 
  echo ""
	# Initialize tiller and wait for complete
	helm init --wait --service-account tiller
}

function install_consul() {
  echo "#### Installing Consul using latest Helm chart"
  echo ""

	# Install the Consul helm chart	
	helm install -n consul ./config/helm-charts/consul-helm-0.9.0

  # Wait for Consul server to be ready
  echo "#### Waiting for Consul server to start"
  echo ""
  until kubectl get pods -l component=server --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done
  
  # Wait for Consul client to be ready
  echo "#### Waiting for Consul client to start"
  echo ""
  until kubectl get pods -l component=client --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done

  # Get a root ACL token and write to disk
  # kubectl get secret consul-consul-bootstrap-acl-token -o json | jq -r .data.token > consul_acl.token 
}

function install_smi() {
  echo "#### Install SMI"
  echo ""

  # Install the CRDs for the controller
  kubectl apply -f ./config/k8s_config
}

function uninstall() {
  echo "### Uninstalling consul-k8s-dev"
  echo "#### You may be prompted for your password!###"
  echo ""
  
  sudo rm -f /usr/local/bin/consul-k8s-dev
  sudo rm -rf $HOME/.consul_k8s
}

function vs_code() {
  echo "Starting VS Code"
  docker run --rm -it -d -p 127.0.0.1:8080:8080 -v "${HOME}/.local/share/code-server:/home/coder/.local/share/code-server" -v "$PWD:/home/coder/project" codercom/code-server:v2
  sleep 10
  open http://127.0.0.1:8080
}

function check_latest() {
  curl -s "https://consul-k8s.demo.gs/latest_version.html" > $HOME/.consul_k8s/latest

  if [ $(cat $HOME/.consul_k8s/latest) != "$VERSION" ];then
    echo "##############################################################"
    echo ""
    echo "consul-k8s-dev needs to be updated!"
    echo ""
    echo "You are using version: $VERSION"
    echo "Latest version: $(cat $HOME/.consul_k8s/latest)"
    echo ""
    echo "run \"consul-k8s-dev upgrade\" to update to the latest version"
    echo ""
    echo "##############################################################"
    echo ""
  fi
}

function upgrade() {
  curl https://consul-k8s.demo.gs/install.sh | bash
}

case "$1" in
  "up")
    check_latest;
    echo "## Creating K8s cluster in Docker and installing Consul"
    echo ""
    up;
    ;;
  "down")
    check_latest;
    echo "## Stopping Kubernetes and cleaning resources"
    down;
    ;;
  "create")
    echo "### Creating Kubernetes cluster, this process will take approximately 2 minutes";
    sleep 5
    install_cluster;
    install_core;
    install_consul;
    install_smi;

    echo "";
    echo "### Setup complete:";
    echo "";
    echo "To interact with Kubernetes set your KUBECONFIG environment variable";
    echo 'export KUBECONFIG="$HOME/.consul_k8s/kubeconfig.yml"';
    echo "";
    echo "Consul can be accessed at: http://localhost:8500";
    echo "";
    echo "When finished use \"consul-k8s-dev down\" to cleanup and remove resources";
    ;;
  "destroy")
    destroy;
    ;;
  "tools")
    check_latest;
    echo "## Running tools container";
    echo "";
    tools $2;
    ;;
  "upgrade")
    echo "Upgrading to latest version";
    echo "";
    upgrade;
    ;;
  "uninstall")
    uninstall;
    ;;
  "vscode")
    echo "## Starting VSCode in a browser"
    vs_code;
    ;;
  *)
    check_latest;

    echo "Options"
    echo "  up            - Start K8s server"
    echo "  down          - Stop K8s server"
    echo "  tools [path]  - Run tools container"
    echo "  upgrade       - Upgrade consul-k8s-dev to latest version"
    echo "  uninstall     - Remove consul-k8s-dev from this machine"
    echo "  vscode        - Run VS Code in a browser"
    exit 1 
    ;;
esac
