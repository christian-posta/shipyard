#!/bin/bash
export KUBECONFIG="$(pwd)/kubeconfig.yml"

function up() {
  docker run --network host -it -v "/var/run/docker.sock:/var/run/docker.sock" -v "$HOME/.consul_k8s:/files" -w "/files" nicholasjackson/consul-k8s-tools:latest bash -c "./consul-k8s-dev create"
}

function down() {
  docker run -it -v "/var/run/docker.sock:/var/run/docker.sock" -v "$HOME/.consul_k8s:/files" -w "/files" nicholasjackson/consul-k8s-tools:latest bash -c "./consul-k8s-dev destroy"
}

function tools() {
  FOLDER="-v $(pwd):/work"

  if [[ ! -z $1 ]]; then
    echo "#### Mapping local folder to tools container"
    FOLDER="-v $1:/work"
  fi;

  docker run --rm -it --network host -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.consul_k8s:/files $FOLDER -w /work -e "KUBECONFIG=/files/kubeconfig.yml" nicholasjackson/consul-k8s-tools:latest bash
}

function destroy() {
  kind delete cluster
}

function install_kind() {
	echo "#### Create Kubernetes cluster in Docker"
  echo ""

	kind create cluster --config ./config/config.yml

  # Export KubeConfig
  cat $(kind get kubeconfig-path --name kind) > ./kubeconfig.yml
}

function install_core() {
	# Wait for cluster to be available
	echo "#### Waiting for Kubernetes to start"
  echo ""

	until $(kubectl get pods); do
		sleep 1
	done

	echo "#### Install local storage controller for Kubernetes"
  echo ""
	# Add storage
	kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
	kubectl get storageclass

	echo "#### Configure RBAC for Helm tiller" 
  echo ""
	# Create tiller service account
	kubectl -n kube-system create serviceaccount tiller

	# Create cluster role binding for tiller
	kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller

	echo "#### Install Helm tiller" 
  echo ""
	# Initialize tiller and wait for complete
	helm init --wait --service-account tiller
}

function install_consul() {
  echo "#### Installing Consul using latest Helm chart"
  echo ""

	# Install the Consul helm chart	
	helm install -n consul ./config/helm-charts/consul-helm-0.9.0

  # Wait for Consul server to be ready
  echo "#### Waiting for Consul server to start"
  echo ""
  until kubectl get pods -l component=server --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done
  
  # Wait for Consul client to be ready
  echo "#### Waiting for Consul client to start"
  echo ""
  until kubectl get pods -l component=client --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done

  # Get a root ACL token and write to disk
  # kubectl get secret consul-consul-bootstrap-acl-token -o json | jq -r .data.token > consul_acl.token 
}

function install_smi() {
  echo "#### Install SMI"
  echo ""

  # Install the CRDs for the controller
  kubectl apply -f ./config/k8s_config
}

function uninstall() {
  echo "### Uninstalling consul-k8s-dev"
  echo "#### You may be prompted for your password!###"
  echo ""
  
  sudo rm -rf $HOME/.consul_k8s
  sudo rm -f /usr/local/bin/consul-k8s-dev
}

function vs_code() {
  echo "Starting VS Code"
  docker run --rm -it -d -p 127.0.0.1:8080:8080 -v "${HOME}/.local/share/code-server:/home/coder/.local/share/code-server" -v "$PWD:/home/coder/project" codercom/code-server:v2
  sleep 10
  open http://127.0.0.1:8080
}

case "$1" in
  "up")
    echo "## Creating K8s cluster in Docker and installing Consul"
    echo ""
    up;
    ;;
  "down")
    echo "## Stopping Kubernetes and cleaning resources"
    down;
    ;;
  "create")
    echo "### Creating Kubernetes cluster, this process will take approximately 2 minutes";
    sleep 5
    install_kind;
    install_core;
    install_consul;
    install_smi;

    echo "";
    echo "### Setup complete:";
    echo "";
    echo "To interact with Kubernetes set your KUBECONFIG environment variable";
    echo "export KUBECONFIG=\"$HOME/.consul_k8s/kubeconfig.yml\"";
    echo "";
    echo "Consul can be accessed at: http://localhost:8500";
    echo "";
    echo "When finished use \"consul-k8s-dev down\" to cleanup and remove resources";
    ;;
  "destroy")
    destroy;
    ;;
  "tools")
    echo "## Running tools container";
    echo "";
    tools $2;
    ;;
  "uninstall")
    uninstall;
    ;;
  "vscode")
    echo "## Starting VSCode in a browser"
    vs_code;
    ;;
  *)
    echo "Options"
    echo "  up            - Start K8s server"
    echo "  down          - Stop K8s server"
    echo "  tools [path]  - Run tools container"
    echo "  vscode        - Run VS Code in a browser"
    echo "  uninstall     - Remove consul-k8s-dev from this machine"
    exit 1 
    ;;
esac
